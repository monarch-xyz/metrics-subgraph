// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AccrueInterest extends ethereum.Event {
  get params(): AccrueInterest__Params {
    return new AccrueInterest__Params(this);
  }
}

export class AccrueInterest__Params {
  _event: AccrueInterest;

  constructor(event: AccrueInterest) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get prevBorrowRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get interest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CreateMarket extends ethereum.Event {
  get params(): CreateMarket__Params {
    return new CreateMarket__Params(this);
  }
}

export class CreateMarket__Params {
  _event: CreateMarket;

  constructor(event: CreateMarket) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get marketParams(): CreateMarketMarketParamsStruct {
    return changetype<CreateMarketMarketParamsStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class CreateMarketMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class EnableIrm extends ethereum.Event {
  get params(): EnableIrm__Params {
    return new EnableIrm__Params(this);
  }
}

export class EnableIrm__Params {
  _event: EnableIrm;

  constructor(event: EnableIrm) {
    this._event = event;
  }

  get irm(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EnableLltv extends ethereum.Event {
  get params(): EnableLltv__Params {
    return new EnableLltv__Params(this);
  }
}

export class EnableLltv__Params {
  _event: EnableLltv;

  constructor(event: EnableLltv) {
    this._event = event;
  }

  get lltv(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FlashLoan extends ethereum.Event {
  get params(): FlashLoan__Params {
    return new FlashLoan__Params(this);
  }
}

export class FlashLoan__Params {
  _event: FlashLoan;

  constructor(event: FlashLoan) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IncrementNonce extends ethereum.Event {
  get params(): IncrementNonce__Params {
    return new IncrementNonce__Params(this);
  }
}

export class IncrementNonce__Params {
  _event: IncrementNonce;

  constructor(event: IncrementNonce) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get usedNonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get repaidAssets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repaidShares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get seizedAssets(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get badDebtAssets(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get badDebtShares(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SetAuthorization extends ethereum.Event {
  get params(): SetAuthorization__Params {
    return new SetAuthorization__Params(this);
  }
}

export class SetAuthorization__Params {
  _event: SetAuthorization;

  constructor(event: SetAuthorization) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get authorized(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get newIsAuthorized(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class SetFee extends ethereum.Event {
  get params(): SetFee__Params {
    return new SetFee__Params(this);
  }
}

export class SetFee__Params {
  _event: SetFee;

  constructor(event: SetFee) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetFeeRecipient extends ethereum.Event {
  get params(): SetFeeRecipient__Params {
    return new SetFeeRecipient__Params(this);
  }
}

export class SetFeeRecipient__Params {
  _event: SetFeeRecipient;

  constructor(event: SetFeeRecipient) {
    this._event = event;
  }

  get newFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetOwner extends ethereum.Event {
  get params(): SetOwner__Params {
    return new SetOwner__Params(this);
  }
}

export class SetOwner__Params {
  _event: SetOwner;

  constructor(event: SetOwner) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SupplyCollateral extends ethereum.Event {
  get params(): SupplyCollateral__Params {
    return new SupplyCollateral__Params(this);
  }
}

export class SupplyCollateral__Params {
  _event: SupplyCollateral;

  constructor(event: SupplyCollateral) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class WithdrawCollateral extends ethereum.Event {
  get params(): WithdrawCollateral__Params {
    return new WithdrawCollateral__Params(this);
  }
}

export class WithdrawCollateral__Params {
  _event: WithdrawCollateral;

  constructor(event: WithdrawCollateral) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Morpho__borrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Morpho__borrowInputMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class Morpho__idToMarketParamsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLoanToken(): Address {
    return this.value0;
  }

  getCollateralToken(): Address {
    return this.value1;
  }

  getOracle(): Address {
    return this.value2;
  }

  getIrm(): Address {
    return this.value3;
  }

  getLltv(): BigInt {
    return this.value4;
  }
}

export class Morpho__liquidateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Morpho__liquidateInputMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class Morpho__marketResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getTotalSupplyAssets(): BigInt {
    return this.value0;
  }

  getTotalSupplyShares(): BigInt {
    return this.value1;
  }

  getTotalBorrowAssets(): BigInt {
    return this.value2;
  }

  getTotalBorrowShares(): BigInt {
    return this.value3;
  }

  getLastUpdate(): BigInt {
    return this.value4;
  }

  getFee(): BigInt {
    return this.value5;
  }
}

export class Morpho__positionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getSupplyShares(): BigInt {
    return this.value0;
  }

  getBorrowShares(): BigInt {
    return this.value1;
  }

  getCollateral(): BigInt {
    return this.value2;
  }
}

export class Morpho__repayResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Morpho__repayInputMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class Morpho__supplyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Morpho__supplyInputMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class Morpho__withdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Morpho__withdrawInputMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class Morpho extends ethereum.SmartContract {
  static bind(address: Address): Morpho {
    return new Morpho("Morpho", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  borrow(
    marketParams: Morpho__borrowInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    receiver: Address,
  ): Morpho__borrowResult {
    let result = super.call(
      "borrow",
      "borrow((address,address,address,address,uint256),uint256,uint256,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return new Morpho__borrowResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_borrow(
    marketParams: Morpho__borrowInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    receiver: Address,
  ): ethereum.CallResult<Morpho__borrowResult> {
    let result = super.tryCall(
      "borrow",
      "borrow((address,address,address,address,uint256),uint256,uint256,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__borrowResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  extSloads(slots: Array<Bytes>): Array<Bytes> {
    let result = super.call("extSloads", "extSloads(bytes32[]):(bytes32[])", [
      ethereum.Value.fromFixedBytesArray(slots),
    ]);

    return result[0].toBytesArray();
  }

  try_extSloads(slots: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "extSloads",
      "extSloads(bytes32[]):(bytes32[])",
      [ethereum.Value.fromFixedBytesArray(slots)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  idToMarketParams(param0: Bytes): Morpho__idToMarketParamsResult {
    let result = super.call(
      "idToMarketParams",
      "idToMarketParams(bytes32):(address,address,address,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Morpho__idToMarketParamsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
    );
  }

  try_idToMarketParams(
    param0: Bytes,
  ): ethereum.CallResult<Morpho__idToMarketParamsResult> {
    let result = super.tryCall(
      "idToMarketParams",
      "idToMarketParams(bytes32):(address,address,address,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__idToMarketParamsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
      ),
    );
  }

  isAuthorized(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isAuthorized",
      "isAuthorized(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBoolean();
  }

  try_isAuthorized(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuthorized",
      "isAuthorized(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isIrmEnabled(param0: Address): boolean {
    let result = super.call("isIrmEnabled", "isIrmEnabled(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isIrmEnabled(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isIrmEnabled", "isIrmEnabled(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLltvEnabled(param0: BigInt): boolean {
    let result = super.call("isLltvEnabled", "isLltvEnabled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isLltvEnabled(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLltvEnabled",
      "isLltvEnabled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidate(
    marketParams: Morpho__liquidateInputMarketParamsStruct,
    borrower: Address,
    seizedAssets: BigInt,
    repaidShares: BigInt,
    data: Bytes,
  ): Morpho__liquidateResult {
    let result = super.call(
      "liquidate",
      "liquidate((address,address,address,address,uint256),address,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizedAssets),
        ethereum.Value.fromUnsignedBigInt(repaidShares),
        ethereum.Value.fromBytes(data),
      ],
    );

    return new Morpho__liquidateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_liquidate(
    marketParams: Morpho__liquidateInputMarketParamsStruct,
    borrower: Address,
    seizedAssets: BigInt,
    repaidShares: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Morpho__liquidateResult> {
    let result = super.tryCall(
      "liquidate",
      "liquidate((address,address,address,address,uint256),address,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizedAssets),
        ethereum.Value.fromUnsignedBigInt(repaidShares),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__liquidateResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  market(param0: Bytes): Morpho__marketResult {
    let result = super.call(
      "market",
      "market(bytes32):(uint128,uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Morpho__marketResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
    );
  }

  try_market(param0: Bytes): ethereum.CallResult<Morpho__marketResult> {
    let result = super.tryCall(
      "market",
      "market(bytes32):(uint128,uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__marketResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
      ),
    );
  }

  nonce(param0: Address): BigInt {
    let result = super.call("nonce", "nonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  position(param0: Bytes, param1: Address): Morpho__positionResult {
    let result = super.call(
      "position",
      "position(bytes32,address):(uint256,uint128,uint128)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return new Morpho__positionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_position(
    param0: Bytes,
    param1: Address,
  ): ethereum.CallResult<Morpho__positionResult> {
    let result = super.tryCall(
      "position",
      "position(bytes32,address):(uint256,uint128,uint128)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__positionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  repay(
    marketParams: Morpho__repayInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    data: Bytes,
  ): Morpho__repayResult {
    let result = super.call(
      "repay",
      "repay((address,address,address,address,uint256),uint256,uint256,address,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromBytes(data),
      ],
    );

    return new Morpho__repayResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_repay(
    marketParams: Morpho__repayInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    data: Bytes,
  ): ethereum.CallResult<Morpho__repayResult> {
    let result = super.tryCall(
      "repay",
      "repay((address,address,address,address,uint256),uint256,uint256,address,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__repayResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  supply(
    marketParams: Morpho__supplyInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    data: Bytes,
  ): Morpho__supplyResult {
    let result = super.call(
      "supply",
      "supply((address,address,address,address,uint256),uint256,uint256,address,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromBytes(data),
      ],
    );

    return new Morpho__supplyResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_supply(
    marketParams: Morpho__supplyInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    data: Bytes,
  ): ethereum.CallResult<Morpho__supplyResult> {
    let result = super.tryCall(
      "supply",
      "supply((address,address,address,address,uint256),uint256,uint256,address,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__supplyResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  withdraw(
    marketParams: Morpho__withdrawInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    receiver: Address,
  ): Morpho__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw((address,address,address,address,uint256),uint256,uint256,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return new Morpho__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_withdraw(
    marketParams: Morpho__withdrawInputMarketParamsStruct,
    assets: BigInt,
    shares: BigInt,
    onBehalf: Address,
    receiver: Address,
  ): ethereum.CallResult<Morpho__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw((address,address,address,address,uint256),uint256,uint256,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(marketParams),
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(onBehalf),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Morpho__withdrawResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get marketParams(): AccrueInterestCallMarketParamsStruct {
    return changetype<AccrueInterestCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get marketParams(): BorrowCallMarketParamsStruct {
    return changetype<BorrowCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BorrowCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class CreateMarketCall extends ethereum.Call {
  get inputs(): CreateMarketCall__Inputs {
    return new CreateMarketCall__Inputs(this);
  }

  get outputs(): CreateMarketCall__Outputs {
    return new CreateMarketCall__Outputs(this);
  }
}

export class CreateMarketCall__Inputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get marketParams(): CreateMarketCallMarketParamsStruct {
    return changetype<CreateMarketCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateMarketCall__Outputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }
}

export class CreateMarketCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class EnableIrmCall extends ethereum.Call {
  get inputs(): EnableIrmCall__Inputs {
    return new EnableIrmCall__Inputs(this);
  }

  get outputs(): EnableIrmCall__Outputs {
    return new EnableIrmCall__Outputs(this);
  }
}

export class EnableIrmCall__Inputs {
  _call: EnableIrmCall;

  constructor(call: EnableIrmCall) {
    this._call = call;
  }

  get irm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableIrmCall__Outputs {
  _call: EnableIrmCall;

  constructor(call: EnableIrmCall) {
    this._call = call;
  }
}

export class EnableLltvCall extends ethereum.Call {
  get inputs(): EnableLltvCall__Inputs {
    return new EnableLltvCall__Inputs(this);
  }

  get outputs(): EnableLltvCall__Outputs {
    return new EnableLltvCall__Outputs(this);
  }
}

export class EnableLltvCall__Inputs {
  _call: EnableLltvCall;

  constructor(call: EnableLltvCall) {
    this._call = call;
  }

  get lltv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnableLltvCall__Outputs {
  _call: EnableLltvCall;

  constructor(call: EnableLltvCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get marketParams(): LiquidateCallMarketParamsStruct {
    return changetype<LiquidateCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seizedAssets(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get repaidShares(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class LiquidateCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get marketParams(): RepayCallMarketParamsStruct {
    return changetype<RepayCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RepayCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetAuthorizationCall extends ethereum.Call {
  get inputs(): SetAuthorizationCall__Inputs {
    return new SetAuthorizationCall__Inputs(this);
  }

  get outputs(): SetAuthorizationCall__Outputs {
    return new SetAuthorizationCall__Outputs(this);
  }
}

export class SetAuthorizationCall__Inputs {
  _call: SetAuthorizationCall;

  constructor(call: SetAuthorizationCall) {
    this._call = call;
  }

  get authorized(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newIsAuthorized(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAuthorizationCall__Outputs {
  _call: SetAuthorizationCall;

  constructor(call: SetAuthorizationCall) {
    this._call = call;
  }
}

export class SetAuthorizationWithSigCall extends ethereum.Call {
  get inputs(): SetAuthorizationWithSigCall__Inputs {
    return new SetAuthorizationWithSigCall__Inputs(this);
  }

  get outputs(): SetAuthorizationWithSigCall__Outputs {
    return new SetAuthorizationWithSigCall__Outputs(this);
  }
}

export class SetAuthorizationWithSigCall__Inputs {
  _call: SetAuthorizationWithSigCall;

  constructor(call: SetAuthorizationWithSigCall) {
    this._call = call;
  }

  get authorization(): SetAuthorizationWithSigCallAuthorizationStruct {
    return changetype<SetAuthorizationWithSigCallAuthorizationStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get signature(): SetAuthorizationWithSigCallSignatureStruct {
    return changetype<SetAuthorizationWithSigCallSignatureStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class SetAuthorizationWithSigCall__Outputs {
  _call: SetAuthorizationWithSigCall;

  constructor(call: SetAuthorizationWithSigCall) {
    this._call = call;
  }
}

export class SetAuthorizationWithSigCallAuthorizationStruct extends ethereum.Tuple {
  get authorizer(): Address {
    return this[0].toAddress();
  }

  get authorized(): Address {
    return this[1].toAddress();
  }

  get isAuthorized(): boolean {
    return this[2].toBoolean();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetAuthorizationWithSigCallSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get marketParams(): SetFeeCallMarketParamsStruct {
    return changetype<SetFeeCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get newFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get marketParams(): SupplyCallMarketParamsStruct {
    return changetype<SupplyCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SupplyCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class SupplyCollateralCall extends ethereum.Call {
  get inputs(): SupplyCollateralCall__Inputs {
    return new SupplyCollateralCall__Inputs(this);
  }

  get outputs(): SupplyCollateralCall__Outputs {
    return new SupplyCollateralCall__Outputs(this);
  }
}

export class SupplyCollateralCall__Inputs {
  _call: SupplyCollateralCall;

  constructor(call: SupplyCollateralCall) {
    this._call = call;
  }

  get marketParams(): SupplyCollateralCallMarketParamsStruct {
    return changetype<SupplyCollateralCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get onBehalf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SupplyCollateralCall__Outputs {
  _call: SupplyCollateralCall;

  constructor(call: SupplyCollateralCall) {
    this._call = call;
  }
}

export class SupplyCollateralCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get marketParams(): WithdrawCallMarketParamsStruct {
    return changetype<WithdrawCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get marketParams(): WithdrawCollateralCallMarketParamsStruct {
    return changetype<WithdrawCollateralCallMarketParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get assets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get onBehalf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCallMarketParamsStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}
