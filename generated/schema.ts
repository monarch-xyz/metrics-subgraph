// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Market extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Market must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Market | null {
    return changetype<Market | null>(store.get("Market", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get marketId(): Bytes {
    let value = this.get("marketId");
    return value!.toBytes();
  }

  set marketId(value: Bytes) {
    this.set("marketId", Value.fromBytes(value));
  }

  get loan(): Bytes {
    let value = this.get("loan");
    return value!.toBytes();
  }

  set loan(value: Bytes) {
    this.set("loan", Value.fromBytes(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value!.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get irm(): Bytes {
    let value = this.get("irm");
    return value!.toBytes();
  }

  set irm(value: Bytes) {
    this.set("irm", Value.fromBytes(value));
  }

  get oracle(): Bytes {
    let value = this.get("oracle");
    return value!.toBytes();
  }

  set oracle(value: Bytes) {
    this.set("oracle", Value.fromBytes(value));
  }

  get lltv(): BigInt {
    let value = this.get("lltv");
    return value!.toBigInt();
  }

  set lltv(value: BigInt) {
    this.set("lltv", Value.fromBigInt(value));
  }
}

export class AssetMetric extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssetMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AssetMetric must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AssetMetric", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): AssetMetric | null {
    return changetype<AssetMetric | null>(
      store.get("AssetMetric", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalWithdraw(): BigInt {
    let value = this.get("totalWithdraw");
    return value!.toBigInt();
  }

  set totalWithdraw(value: BigInt) {
    this.set("totalWithdraw", Value.fromBigInt(value));
  }

  get numOfSupply(): i32 {
    let value = this.get("numOfSupply");
    return value!.toI32();
  }

  set numOfSupply(value: i32) {
    this.set("numOfSupply", Value.fromI32(value));
  }

  get numOfWithdraw(): i32 {
    let value = this.get("numOfWithdraw");
    return value!.toI32();
  }

  set numOfWithdraw(value: i32) {
    this.set("numOfWithdraw", Value.fromI32(value));
  }
}
